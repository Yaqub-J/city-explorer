generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       String           @id @default(uuid())
  username     String
  email        String
  profilePic   String?
  role         Role             @default(USER)
  userMessages String[]
  botReplies   String[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  password     Password?
  reviews      Review[]
  responses    ReviewResponse[]

  @@unique([email, role])
}

model Business {
  businessId  String         @id @default(uuid())
  name        String
  email       String
  phone       String?
  category    String?
  description String?
  location    String?
  latitude    Float?
  longitude   Float?
  logo        String?
  image       String?
  website     String?
  role        Role           @default(BUSINESS)
  status      ApprovalStatus @default(PENDING)
  suspended   Boolean        @default(false)
  openHours   String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  events      Event[]
  items       Item[]
  password    Password?
  promos      Promo[]
  reviews     Review[]

  @@unique([email, role])
}

model Admin {
  adminId   String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  role      AdminRole @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  Password?
}

model Password {
  passwordId        String    @id @default(uuid())
  hashedPassword    String
  resetToken        String?
  resetTokenExpires DateTime?
  userId            String?   @unique
  businessId        String?   @unique
  adminId           String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  admin             Admin?    @relation(fields: [adminId], references: [adminId])
  business          Business? @relation(fields: [businessId], references: [businessId], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Item {
  itemId      String   @id @default(uuid())
  name        String
  description String?
  price       String?
  image       String?
  businessId  String
  business    Business @relation(fields: [businessId], references: [businessId])
}

model Event {
  eventId             String   @id @default(uuid())
  title               String
  description         String
  date                DateTime
  location            String
  latitude            Float?
  longitude           Float?
  images              String[]
  paid                Boolean  @default(false)
  amount              Float?
  isPaymentSuccessful Boolean?
  businessId          String
  business            Business @relation(fields: [businessId], references: [businessId])
}

model Promo {
  promoId     String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  images      String[]
  businessId  String
  business    Business @relation(fields: [businessId], references: [businessId])
}

model Review {
  reviewId        String           @id @default(uuid())
  content         String?
  rating          Int?
  userId          String
  businessId      String
  createdAt       DateTime         @default(now())
  business        Business         @relation(fields: [businessId], references: [businessId])
  user            User             @relation(fields: [userId], references: [userId])
  reviewResponses ReviewResponse[]
}

model ReviewResponse {
  reviewResponseId String   @id @default(uuid())
  content          String
  userId           String
  reviewId         String
  createdAt        DateTime @default(now())
  review           Review   @relation(fields: [reviewId], references: [reviewId])
  user             User     @relation(fields: [userId], references: [userId])
}

enum Role {
  USER
  BUSINESS
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
}
